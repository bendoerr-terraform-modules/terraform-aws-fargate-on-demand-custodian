#!/usr/bin/env bash
#

################################################################################
# Sanity
################################################################################

set -o errexit
set -o nounset
set -o pipefail

# Going to use pattern matching with multiple patterns to validate event type
# https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching
shopt -s extglob

################################################################################
# DEBUG
################################################################################

if [[ "${SCRIPT_DBG:-0}" == "1" ]]; then
  set +x
fi

################################################################################
# Globals
################################################################################

# shellcheck disable=SC2155
declare -r SCRIPT_NAME="$(basename "$0")"

# Global SNS_TOPIC so that an event can be sent on sigterm
declare SNS_TOPIC="${SNS_TOPIC_ARN:-}"

################################################################################
# Helpers
################################################################################

function io::print_help() {
  printf '\n%s\n' "Ben's Terraform AWS Fargate on Demand Custodian"
  printf 'Usage: %s [-h|--help] [options]\n' "$(basename "$0")"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\t%s\n' ""
  printf '\n%s\n' "Watch Options"
  printf '\t%s\n' "--watch-tcp     (WATCH_TCP)     TCP Port to watch using a iptables rule"
  printf '\t%s\n' "--watch-idle    (WATCH_IDLE)    Number of seconds to remain idle"
  printf '\t%s\n' ""
  printf '\n%s\n' "Required Options"
  printf '\t%s\n' "--dns-zone-id   (DNS_ZONE_ID)   Route 53 Zone ID containing the record to update"
  printf '\t%s\n' "--dns-record    (DNS_RECORD)    Route 53 record to update"
  printf '\t%s\n' ""
  printf '\n%s\n' "Options"
  printf '\t%s\n' "--revert-value  (REVERT_VALUE)  Route 53 record value to set"
  printf '\t%s\n' "--revert-type   (REVERT_TYPE)   Route 53 record type"
  printf '\t%s\n' "--topic         (SNS_TOPIC_ARN) SNS Topic to send events"
  printf '\t%s\n' ""
}

function io::info() {
  xopts=("--tag" "${SCRIPT_NAME}" "--id=$$")
  if [[ -t 0 ]]; then
    xopts+=("--stderr")
  fi
  logger "${xopts[@]}" "INFO  $*"
}

function io::die() {
  local msg="${1}"
  local ret="${2:-1}"
  local print_help="${3:-}"

  if [[ ${print_help} == "print help" ]]; then
    io::print_help >&2
  fi

  logger --tag "${SCRIPT_NAME}" --id="$$" --stderr "ERROR ${msg}"

  exit "${ret}"
}

function io:die_missing_value() {
  local key="${1}"
  io::die "missing value for argument '${key}'"
}

################################################################################
# Trap
################################################################################

function sigterm() {
  io::info "Terminating..."

  io::info "Stopping task..."
  task-reaper

  if [[ -z "${SNS_TOPIC}" ]]; then
    io::info "Emitting stop event..."
    event-emitter --type 'stop' --topic "${SNS_TOPIC}"
  fi

  io::info "... done"
  exit 0
}
trap sigterm SIGTERM

################################################################################
# Main
################################################################################

function main() {
  local -a args
  IFS=" " read -r -a args <<< "$@"

  local tcp_port=""
  local idle_timeout="600"

  while test $# -gt 0; do
    key="${1}"
    shift

    case "${key}" in
    --help | -h)
      io::print_help
      exit 0
      ;;
    --topic)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      SNS_TOPIC="${1}"
      shift
      ;;
    --watch-tcp)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      tcp_port="${1}"
      shift
      ;;
    --watch-idle)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      idle_timeout="${1}"
      shift
      ;;
    esac
  done

  if [[ -z "${SNS_TOPIC}" ]]; then
    io::info "Emitting start event..."
    event-emitter --type 'start' "${args[@]}"
  fi

  io::info "Updating DNS record..."
  dns-updater "${args[@]}"

  if [[ -z "${tcp_port}" ]]; then
  io::info "Starting TCP Port Watcher..."
    watcher-tcp "${tcp_port}" "${idle_timeout}"
  fi

  io::info "Stopping task..."
  task-reaper

  if [[ -z "${SNS_TOPIC}" ]]; then
    io::info "Emitting stop event..."
    event-emitter --type 'stop' "${args[@]}"
  fi

  io::info "... done"
}


################################################################################
# Entry Point
################################################################################

main "$@"
