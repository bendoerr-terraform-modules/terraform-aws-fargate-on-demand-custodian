#!/usr/bin/env bash
#

################################################################################
# Sanity
################################################################################

set -o errexit
set -o nounset
set -o pipefail

################################################################################
# Globals
################################################################################

# shellcheck disable=SC2155
declare -r SCRIPT_NAME="$(basename "$0")"

################################################################################
# Helpers
################################################################################

function io::print_help() {
  printf '\n%s\n' "Ben's Terraform AWS Fargate on Demand Task Reaper"
  printf 'Usage: %s [-h|--help] [options]\n' "$(basename "$0")"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\t%s\n' ""
  printf '\n%s\n' "Required Options"
  printf '\t%s\n' "--dns-zone-id   (DNS_ZONE_ID)   Route 53 Zone ID containing the record to update"
  printf '\t%s\n' "--dns-record    (DNS_RECORD)    Route 53 record to update"
  printf '\t%s\n' ""
  printf '\n%s\n' "Options"
  printf '\t%s\n' "--revert        (REVERT)        Route 53 record value to set"
  printf '\t%s\n' "--revert-value  (REVERT_VALUE)  Route 53 record value to set"
  printf '\t%s\n' "--revert-type   (REVERT_TYPE)   Route 53 record type"
  printf '\t%s\n' ""
}

function io::info() {
  xopts=("--tag" "${SCRIPT_NAME}" "--id=$$")
  if [[ -t 0 ]]; then
    xopts+=("--stderr")
  fi
  logger "${xopts[@]}" "INFO  $*"
}

function io::die() {
  local msg="${1}"
  local ret="${2:-1}"
  local print_help="${3:-}"

  if [[ ${print_help} == "print help" ]]; then
    io::print_help >&2
  fi

  echo "ERROR ${msg}" >&2
  logger --tag "${SCRIPT_NAME}" --id="$$" "${msg}"

  exit "${ret}"
}

function io:die_missing_value() {
  local key="${1}"
  io::die "missing value for argument '${key}'"
}

################################################################################
# Main
################################################################################

function main() {
  local dns_zone_id="${DNS_ZONE_ID:-}"
  local dns_record="${DNS_RECORD:-}"
  local revert="${REVERT:-"false"}"
  local revert_value="${REVERT_VALUE:-}"
  local revert_type="${REVERT_TYPE:-}"

  while test $# -gt 0; do
    key="${1}"
    shift

    case "${key}" in
    --help | -h)
      io::print_help
      exit 0
      ;;
    --dns-zone-id)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      dns_zone_id="${1}"
      shift
      ;;
    --dns-record)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      dns_record="${1}"
      shift
      ;;
    --revert)
      revert="true"
      ;;
    --revert-type)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      revert_type="${1}"
      shift
      ;;
    --revert-value)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      revert_value="${1}"
      shift
      ;;
    esac
  done

  if [[ -z ${dns_zone_id} ]]; then
    io::die_missing_value "--dns-zone-id"
  fi

  if [[ -z ${dns_record} ]]; then
    io::die_missing_value "--dns-record"
  fi

  io:info "Fetching task metadata..."
  local \
    cluster \
    dns_update_file \
    task_arn \
    task_eni \
    task_id \
    task_ip \
    task_metadata

  task_metadata="$(
    curl --silent \
      --fail \
      --show-error \
      "${ECS_CONTAINER_METADATA_URI_V4}/task"
  )"

  cluster="$(jq -r '.Cluster' <<< "${task_metadata}")"
  task_arn="$(jq -r '.TaskARN' <<< "${task_metadata}")"
  task_id="$(awk -F/ '{ print $NF }' <<< "${task_arn}")"

  io::info "Cluster: ${cluster}"
  io::info "Task ARN: ${task_arn}"
  io::info "Task ID: ${task_id}"

  io::info "Fetching public IP address..."

  task_eni="$(
    aws ecs describe-tasks \
      --cluster "${cluster}" \
      --tasks "${task_id}" \
      --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value | [0]" \
      --output text
  )"

  io::info "Task ENI: ${task_eni}"

  task_ip="$(
    aws ec2 describe-network-interfaces \
      --network-interface-ids "${task_eni}" \
      --query 'NetworkInterfaces[0].Association.PublicIp' \
      --output text
  )"

  io::info "Task IP: ${task_ip}"

  dns_update_file="$(mktemp)"
  if [[ "true" == "${revert}" ]]; then
    io::info "Issuing DNS change for ${dns_record} to ${revert_type} ${revert_value}..."
    cat <<- EOF >> "${dns_update_file}"
			{
			  "Comment": "Ben's Terraform AWS Fargate on Demand Revert to Default",
			  "Changes": [
			    {
			      "Action": "UPSERT",
			      "ResourceRecordSet": {
			        "Name": "${dns_record}",
			        "Type": "${revert_type}",
			        "TTL": 30,
			        "ResourceRecords": [
			          {
			            "Value": "${revert_value}"
			          }
			        ]
			      }
			    }
			  ]
			}
			EOF
  else
    io::info "Issuing DNS change for ${dns_record} to A ${task_ip}..."
    cat <<- EOF >> "${dns_update_file}"
			{
			  "Comment": "Ben's Terraform AWS Fargate on Demand Update Public IP",
			  "Changes": [
			    {
			      "Action": "UPSERT",
			      "ResourceRecordSet": {
			        "Name": "${dns_record}",
			        "Type": "A",
			        "TTL": 30,
			        "ResourceRecords": [
			          {
			            "Value": "${task_ip}"
			          }
			        ]
			      }
			    }
			  ]
			}
			EOF
  fi

  aws route53 change-resource-record-sets \
    --hosted-zone-id "${dns_zone_id}" \
    --change-batch "${dns_update_file}"

  io::info "... done"
}

################################################################################
# Entry Point
################################################################################

main "$@"
