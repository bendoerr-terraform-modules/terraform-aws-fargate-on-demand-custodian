#!/usr/bin/env bash
#

################################################################################
# Sanity
################################################################################

set -o errexit
set -o nounset
set -o pipefail

# Going to use pattern matching with multiple patterns to validate event type
# https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching
set -o extglob

################################################################################
# Globals
################################################################################

# shellcheck disable=SC2155
declare -r SCRIPT_NAME="$(basename "$0")"

################################################################################
# Helpers
################################################################################

function io::print_help() {
  printf '\n%s\n' "Ben's Terraform AWS Fargate on Demand SNS Emitter"
  printf 'Usage: %s [-h|--help] [options]\n' "$(basename "$0")"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\t%s\n' ""
  printf '\n%s\n' "Required Options"
  printf '\t%s\n' "--topic  (SNS_TOPIC_ARN)   SNS Topic to send events"
  printf '\t%s\n' "--event  (SNS_EVENT_TYPE)  Event type, one of start, stop, active, inactive"
  printf '\t%s\n' ""
}

function io::info() {
  xopts=("--tag" "${SCRIPT_NAME}" "--id=$$")
  if [[ -t 0 ]]; then
    xopts+=("--stderr")
  fi
  logger "${xopts[@]}" "INFO  $*"
}

function io::die() {
  local msg="${1}"
  local ret="${2:-1}"
  local print_help="${3:-}"

  if [[ ${print_help} == "print help" ]]; then
    io::print_help >&2
  fi

  echo "ERROR ${msg}" >&2
  logger --tag "${SCRIPT_NAME}" --id="$$" "${msg}"

  exit "${ret}"
}

function io:die_missing_value() {
  local key="${1}"
  io::die "missing value for argument '${key}'"
}

################################################################################
# Main
################################################################################

function main() {
  local topic="${SNS_TOPIC_ARN:-}"
  local event="${SNS_EVENT_TYPE}"

  while test $# -gt 0; do
    key="${1}"
    shift

    case "${key}" in
    --help | -h)
      io::print_help
      exit 0
      ;;
    --topic)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      topic="${1}"
      shift
      ;;
    --event)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      event="${1}"
      shift
      ;;
    esac
  done

  if [[ -z "${topic}" ]]; then
    io::die_missing_value "--topic"
  fi

  if [[ -z "${event}" ]]; then
    io::die_missing_value "--event"
  fi

  if [[ ! "${event}" = @(start|stop|active|inactive) ]]; then
    io::die "Event (${event}) must be one of start, stop ,active, inactive"
  fi

  io:info "Fetching task metadata..."
  local \
    cluster \
    service \
    task_metadata

  task_metadata="$(
    curl --silent \
      --fail \
      --show-error \
      "${ECS_CONTAINER_METADATA_URI_V4}/task"
  )"

  cluster="$(jq -r '.Cluster' <<< "${task_metadata}")"
  service="$(jq -r '.Service' <<< "${task_metadata}")"

  io::info "Cluster: ${cluster}"
  io::info "Service: ${service}"

  io::info "Sending ${event} event to ${topic} for ${cluster}/${service}..."

  aws sns publish --topic-arn "${topic}" --message "$(cat <<-EOF
		{
		  "Cluster": "${cluster}",
		  "Service": "${service}",
		  "Event": "${event}",
		  "Topic": "${topic}"
		}
		EOF
  )"

  io::info "... done"

}

################################################################################
# Entry Point
################################################################################

main "$@"