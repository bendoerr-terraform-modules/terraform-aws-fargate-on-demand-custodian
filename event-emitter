#!/usr/bin/env bash
#

################################################################################
# Sanity
################################################################################

set -o errexit
set -o nounset
set -o pipefail

# Going to use pattern matching with multiple patterns to validate type type
# https://www.gnu.org/software/bash/manual/bash.html#Pattern-Matching
shopt -s extglob

################################################################################
# Globals
################################################################################

# shellcheck disable=SC2155
declare -r SCRIPT_NAME="$(basename "$0")"

################################################################################
# Helpers
################################################################################

function io::print_help() {
  printf '\n%s\n' "Ben's Terraform AWS Fargate on Demand SNS Emitter"
  printf 'Usage: %s [-h|--help] [options]\n' "$(basename "$0")"
  printf '\t%s\n' "-h, --help: Prints help"
  printf '\t%s\n' ""
  printf '\n%s\n' "Required Options"
  printf '\t%s\n' "--topic  (SNS_TOPIC_ARN)   SNS Topic to send events"
  printf '\t%s\n' "--type  (SNS_EVENT_TYPE)  Event type, one of start, stop, active, inactive"
  printf '\t%s\n' ""
}

function io::info() {
  echo "[${SCRIPT_NAME}] INFO $*"
}

function io::die() {
  local msg="${1}"
  local ret="${2:-1}"
  local print_help="${3:-}"

  if [[ ${print_help} == "print help" ]]; then
    io::print_help >&2
  fi

  echo "[${SCRIPT_NAME}] ERROR ${msg}"

  exit "${ret}"
}

function io::die_missing_value() {
  local key="${1}"
  io::die "missing value for argument '${key}'"
}

################################################################################
# Main
################################################################################

function main() {
  local topic="${SNS_TOPIC_ARN:-}"
  local type="${SNS_EVENT_TYPE:-}"

  while test $# -gt 0; do
    key="${1}"
    shift

    case "${key}" in
    --help | -h)
      io::print_help
      exit 0
      ;;
    --topic)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      topic="${1}"
      shift
      ;;
    --type)
      if [[ $# -lt 1 ]]; then
        io::die_missing_value "${key}"
      fi
      type="${1}"
      shift
      ;;
    *)
      io::info "unsupported option: ${key}"
      ;;
    esac
  done

  if [[ -z "${topic}" ]]; then
    io::die_missing_value "--topic"
  fi

  if [[ -z "${type}" ]]; then
    io::die_missing_value "--type"
  fi

  if [[ ! "${type}" = @(start|stop|active|inactive) ]]; then
    io::die "Event (${type}) must be one of start, stop ,active, inactive"
  fi

  io::info "Fetching task metadata..."
  local \
    cluster \
    service \
    task_metadata

  task_metadata="$(
    curl --silent \
      --fail \
      --show-error \
      "${ECS_CONTAINER_METADATA_URI_V4:?missing}/task"
  )"

  cluster="$(jq -r '.Cluster' <<<"${task_metadata}")"
  service="$(jq -r '.Family' <<<"${task_metadata}")"

  io::info "Cluster: ${cluster}"
  io::info "Service: ${service}"

  io::info "Sending ${type} type to ${topic} for ${cluster}/${service}..."

  message="$(
    cat <<-EOF
    {
      "Cluster": "${cluster}",
      "Service": "${service}",
      "Event": "${type}",
      "Topic": "${topic}"
		}
		EOF
  )"

  aws sns publish \
    --topic-arn "${topic}" \
    --message "${message}" \
    >/dev/null

  io::info "... done"

}

################################################################################
# Entry Point
################################################################################

main "$@"
